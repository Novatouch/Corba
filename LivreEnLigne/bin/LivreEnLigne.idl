module LivreEnLigne {

    struct LivreChiffre {
	string contenu; 
	short cle;
    };
	
    struct InfoBancaires {
	string compte; 
	string code;
    };


    exception ExceptionMiseAJourLivre {
        string raison;
    };

    exception ExceptionMiseAJourLivrePret {
        string raison;
    };

    exception ExceptionNoLivreFound {
        string raison;
    };

    exception ExceptionEchecCommande {
        string raison;
    };

    exception ExceptionAuthorizationFailed {
        string raison;
    };

    exception ExceptionMoneyTransferRefused {
        string raison;
    };

    exception ExceptionPretNotDeleted {
        string raison;
    };

    exception ExceptionPretNotAllowed {
        string raison;
    };
    exception ExceptionPretNotSaved {
        string raison;
    };


    interface Fournisseur;

    interface Lecteur {
        void miseAjourLivre( in string pTitre, in string pAuteur, in string pFournisseur, in LivreChiffre pLivre) raises (ExceptionMiseAJourLivre);
	void miseAjourLivrePret( in string pTitre, in string pAuteur, in string pNomProprietaire, in string pFournisseur, in LivreChiffre pLivre) raises (ExceptionMiseAJourLivrePret);
        void confirmerTelechargement( in string pTitre, in string pAuteur, in string pFournisseur, in Fournisseur pIorFournisseur);
        void recevoirPret(in string pTitre, in string pAuteur, in string pNomProprietaire, in string pFournisseur, in Fournisseur pIorFournisseur);
	void retirerPret(in string pTitre, in string pAuteur, in string pNomProprietaire);

    };
	
    interface Fournisseur {
        float rechercherLivre(in string pTitre, in string pAuteur) raises (ExceptionNoLivreFound);
        void commander(in string pTitre, in string pAuteur, in string pCompte, in string pCode, in string pLecteur, in Lecteur pIorLecteur) raises (ExceptionEchecCommande);
        LivreChiffre telechargerLivre(in string pTitre, in string pAuteur, in string pUtilisateurProprietaire);
	LivreChiffre telechargerLivrePret(in string pTitre, in string pAuteur, in string pUtilisateur, in string pUtilisateurEmprunteur);
        void creerPret(in string pUtilisateurPreteur, in string pUtilisateurEmprunteur, in Lecteur pIorUtilisateurEmprunteur, in string pTitre, in string pAuteur) raises (ExceptionPretNotAllowed);
        void retirerPret(in string pUtilisateurPreteur,in string pUtilisateurEmprunteur, in Lecteur pIorUtilisateurEmprunteur, in string pTitre, in string pAuteur) raises (ExceptionPretNotDeleted);
	void flush();
    };

    struct InfoRecherche {
	string nomFournisseur;
	Fournisseur iorFournisseur;
	float prix;
    };

    interface Mandataire {
        InfoRecherche rechercherLivre(in string pTitre, in string pAuteur) raises (ExceptionNoLivreFound);
        void enregistrementFournisseur(in string pFournisseur,in Fournisseur pIorFournisseur);
	void flush();
    };

    interface Controleur {
        void verifierAutorisation(in string pTitre, in string pAuteur, in string pUtilisateur, in string pFournisseur) raises (ExceptionAuthorizationFailed);
	void verifierAutorisationPret(in string pTitre, in string pAuteur, in string pUtilisateurProprietaire, in string pUtilisateurEmprunteur, in string pFournisseur) raises (ExceptionAuthorizationFailed);
        void enregistrerPret(in string pUtilisateurPreteur, in string pUtilisateurEmprunteur, in string pTitre, in string pAuteur, in string pFournisseur)  raises (ExceptionPretNotSaved);
        void enregistrerAchat( in string pUtilisateur, in string pTitre, in string pAuteur, in string pFournisseur);
        void retirerPret(in string pUtilisateurPreteur, in string pUtilisateurEmprunteur, in string pFournisseur, in string pTitre, in string pAuteur);
	void flush();
    };

    interface Banque {
        void verifierCoordonneesBancaires(in string pCompte, in  string pCode) raises (ExceptionMoneyTransferRefused);
    };
};
